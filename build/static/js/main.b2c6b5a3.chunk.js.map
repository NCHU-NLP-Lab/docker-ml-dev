{"version":3,"sources":["TemplateGen.jsx","App.js","serviceWorker.js","index.js"],"names":["App","props","setDocker","e","console","log","target","id","setState","docker","setImage","image","setOptions","checked","eleId","options","state","push","filter","option","addPort","portingInput","current","value","ports","portingInputValue","rmPort","port","p","codeServerPort","jupyterPort","sshPort","React","createRef","this","className","onClick","type","onChange","ref","placeholder","map","i","key","join","Component","TemplateGen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b2c6b5a3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      docker: '',\r\n      image: '',\r\n      options: [],\r\n      ports: [],\r\n      codeServerPort: '-p 8080:8080',\r\n      jupyterPort: '-p 8080:8080',\r\n      sshPort: '-p 22:22',\r\n      portingInputValue: ''\r\n    }\r\n\r\n    this.portingInput = React.createRef()\r\n  }\r\n\r\n  setDocker = (e) => {\r\n    console.log(e.target.id)\r\n    this.setState({\r\n      docker: e.target.id\r\n    })\r\n  }\r\n\r\n  setImage = (e) => {\r\n    console.log(e.target.id)\r\n    this.setState({\r\n      image: e.target.id\r\n    })\r\n  }\r\n\r\n  setOptions = (e) => {\r\n    console.log(e.target.id, e.target.checked)\r\n    let eleId = e.target.id\r\n    let checked = e.target.checked\r\n    let { options } = this.state\r\n    if (checked) {\r\n      options.push(eleId)\r\n      this.setState({\r\n        options\r\n      })\r\n    }\r\n    else {\r\n      options = options.filter((option) => {\r\n        return !(option === eleId)\r\n      })\r\n      this.setState({\r\n        options\r\n      })\r\n    }\r\n  }\r\n\r\n  addPort = () => {\r\n    console.log(this.portingInput.current.value)\r\n    let addPort = this.portingInput.current.value\r\n    if (addPort === '' || typeof addPort === 'undefined') {\r\n      return\r\n    }\r\n    let { ports } = this.state\r\n    ports.push(`-p ${addPort}`)\r\n    this.setState({\r\n      ports,\r\n      portingInputValue: ''\r\n    })\r\n  }\r\n\r\n  rmPort = (port) => {\r\n    console.log(port)\r\n    let { ports } = this.state\r\n    ports = ports.filter((p) => {\r\n      return !(p === port)\r\n    })\r\n    this.setState({\r\n      ports\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let { docker, image, options, ports, sshPort, jupyterPort, codeServerPort } = this.state\r\n    return (\r\n      <div className=\"container\">\r\n        <h3>Dokcer for ai dev</h3>\r\n        <h4>docker setting</h4>\r\n        <div className=\"select-image\">\r\n          <div className=\"form-group row\">\r\n            <div className=\"col col-12\">\r\n              <button\r\n                className=\"btn btn-sm btn-secondary\"\r\n                id=\"docker --gpus all\"\r\n                onClick={this.setDocker}\r\n              >\r\n                with GPU and docker 19.03+\r\n            </button>\r\n            </div>\r\n            <div className=\"col col-12\">\r\n              <button\r\n                className=\"btn btn-sm btn-secondary\"\r\n                id=\"nvidia-docker\"\r\n                onClick={this.setDocker}\r\n              >\r\n                with nvidia-docker\r\n            </button>\r\n            </div>\r\n            <div className=\"col col-12\">\r\n              <button\r\n                className=\"btn btn-sm btn-secondary\"\r\n                id=\"docker\"\r\n                onClick={this.setDocker}\r\n              >\r\n                only cpu\r\n            </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <h4>select image</h4>\r\n        <div className=\"select-image\">\r\n          <div className=\"form-group row\">\r\n            <div className=\"col col-12\">\r\n              <button\r\n                className=\"btn btn-sm btn-secondary\"\r\n                id=\"p208p2002/docker-for-ai-dev:cu10.0-py36-tf1.14.0-torch1.3-jupyter-vscode\"\r\n                onClick={this.setImage}\r\n              >\r\n                docker-for-ai-dev:cu10.0-py36-tf1.14.0-torch1.3-jupyter-vscode\r\n            </button>\r\n            </div>\r\n            <div className=\"col col-12\">\r\n              <button\r\n                className=\"btn btn-sm btn-secondary\"\r\n                id=\"p208p2002/docker-for-ai-dev:cu10.1-py36-tf2.1.0-torch1.4-jupyter-vscode\"\r\n                onClick={this.setImage}\r\n              >\r\n                docker-for-ai-dev:cu10.1-py36-tf2.1.0-torch1.4-jupyter-vscode\r\n            </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <h4>container options</h4>\r\n        <div className=\"container-options\">\r\n          <div className=\"form-group\">\r\n            <div className=\"form-group form-check\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                id=\"-itd\"\r\n                onChange={this.setOptions}\r\n              />\r\n              <label className=\"form-check-label\">-itd</label>\r\n            </div>\r\n            <div className=\"form-group form-check\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                id=\"--restart=always\"\r\n                onChange={this.setOptions}\r\n              />\r\n              <label className=\"form-check-label\">--restart=always</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <h4>service port</h4>\r\n        <div className=\"func-port\">\r\n          <div className=\"form-group\">\r\n            <p>code server(web vscode)\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                onChange={(e) => {\r\n                  this.setState({\r\n                    codeServerPort: `-p ${e.target.value}:8080`\r\n                  })\r\n                }}\r\n              /></p>\r\n            <p>jupyter\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                onChange={(e) => {\r\n                  this.setState({\r\n                    jupyterPort: `-p ${e.target.value}:8888`\r\n                  })\r\n                }}\r\n              /></p>\r\n            <p>ssh\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                onChange={(e) => {\r\n                  this.setState({\r\n                    sshPort: `-p ${e.target.value}:22`\r\n                  })\r\n                }}\r\n              /></p>\r\n          </div>\r\n        </div>\r\n\r\n        <h4>porting</h4>\r\n        <div className=\"porting\">\r\n          <div className=\"form-group\">\r\n            <input\r\n              ref={this.portingInput}\r\n              value={this.state.portingInputValue}\r\n              onChange={(e) => {\r\n                this.setState({\r\n                  portingInputValue: e.target.value\r\n                })\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"EXTERNAL_PORT:INTERNAL_PORT\"\r\n              className=\"form-control\" />\r\n            <ul>\r\n              {ports.map((port, i) => {\r\n                return <li key={i}>{port} <span onClick={() => this.rmPort(port)} className=\"btn btn-sm btn-danger\">x</span></li>\r\n              })}\r\n            </ul>\r\n            <div\r\n              className=\"btn btn-primary\"\r\n              onClick={this.addPort}\r\n            >ADD</div>\r\n          </div>\r\n        </div>\r\n\r\n        <h4>cmd</h4>\r\n        <div className=\"form-group\">\r\n          <input type=\"text\" className=\"form-control\" value={\r\n            `${docker} ${options.join(' ')} ${ports.join(' ')} ${sshPort} ${jupyterPort} ${codeServerPort} ${image}`\r\n          } />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n\r\n","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport TemplateGen from './TemplateGen'\r\nexport class App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <TemplateGen/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}